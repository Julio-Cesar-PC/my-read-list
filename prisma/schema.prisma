datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js" // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  livrosUser    LivrosUser[]
  following     Follows[]  @relation("follower")
  followers     Follows[]  @relation("following")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Livros {
  id              String   @id @default(cuid())
  googleId        String   @unique
  titulo          String
  autor           String
  editora         String
  dataPublicacao  DateTime @db.Date
  paginas         Int
  imageLink       String
  selfLink        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  livrosUser      LivrosUser[]
}

model LivrosUser {
  id            String   @id @default(cuid())
  userId        String
  livroId       String
  paginasLidas  Int
  nota          Int
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  User  User    @relation(fields: [userId], references: [id])
  Livros Livros @relation(fields: [livroId], references: [id])
}

model Follows {
  follower User @relation("follower", fields: [followerId], references: [id])
  followerId String
  following User @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId]) // composite id
}